///Single Inheritance:
#include<iostream> 
using namespace std; 
class vehicle{ 
 public: 
  vehicle(){ 
}; 
class car:public vehicle 
{
public: 
  car(){ 
   cout<<"This vehicle is a car"<<endl; 
  } 
}; 
int main() 
{ 
 car obj; 
 return 0; 
} 
//

//Multiple Inheritance:

#include<iostream> 
using namespace std; 
class landvehicle{ 
 public: 
  landvehicle(){ 
   cout<<"This is a land vehicle"<<endl;
  } 
}; 
class watervehicle{ 
 public: 
 watervehicle(){ 
  cout<<"This is a water vehicle"<<endl; 
 } 
}; 
class amphibiousvehicle:public watervehicle,public landvehicle{ 
 public: 
  amphibiousvehicle(){ 
   cout<<"This is an both land and water vehicle"<<endl; 
  } 
}; 
int main(){ 
 amphibiousvehicle obj; 
 return 0; 
} 
//

//Multilevel Inheritance:

#include<iostream> 
using namespace std; 
class vehicle{ 
 public: 
  vehicle(){ 
  cout<<"This is a vehicle"<<endl;} 
   
}; 
class fourwheeler:public vehicle{ 
 public: 
  fourwheeler(){ 
   cout<<"4 wheeler vehicles"<<endl; 
  } 
}; 
class car:public fourwheeler{ 
 public: 
  car(){ 
   cout<<"This 4 wheeler vehicle is a car";
  } 
}; 
int main(){
 car obj; 
 return 0; 
} 
///

//Hierarchical Inheritance:

 #include<iostream> 
using namespace std; 
class vehicle{ 
 public: 
  vehicle(){ 
   cout<<"This is a vehicle"<< endl;    
  } 
}; 
class car : public vehicle{ 
 public:
car(){ 
   cout<<"This vehicle is a car"<< endl; 
    
  } 
}; 
class bus : public vehicle{ 
 public: 
  bus(){ 
   
  cout<<"This vehicle is bus"<< endl; 
} 
}; 
int main(){ 
 car obj1; 
 bus obj2; 
}

//Hybrid Inheritance:

#include<iostream> 
using namespace std; 
class vehicle{ 
 public: 
  vehicle(){     
  } 
}; 
class fare{ 
 public: 
  fare(){ 
    cout<<"Fare of a vehicle"<<endl
 } 
}; 
class car:public vehicle{
 public: 
  car(){ 
     cout<<"This vehicle is a car"<<endl;
  } 
}; 
class bus:public vehicle,public fare{ 
 public: 
  bus(){     
  } 
}; 
int main() 
{ 
 bus obj2;   
}

//

#include<iostream> 
using namespace std; 
class parent{ 
 public: 
  parent() 
  { 
   cout<<"parent class construtor\n";
  } 
 ~parent() 
 { 
  cout<<"parent class destructor\n"; 
 } 
}; 
class child :public parent{ 
 public: 
  child() 
  { 
   cout<<"child class constructor\n"; 
  } 
  ~child() 
  { 
   cout<<"child class destructor\n"; 
  } 
}; 
int main() 
{ 
 child c; 
 return 0; 
}













