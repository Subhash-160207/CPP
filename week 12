#include <iostream> 
#include <list> 
#include <vector> 
using namespace std; 
int main() { 
cout << "=== VECTOR OPERATIONS ===" << endl; 
vector<int> v;  
      v.push_back(10);     
v.push_back(20); 
v.push_back(30); 
cout << "Vector elements after insertion: "; 
for (int x : v) 
cout << x << " "; 
v.pop_back(); 
cout << "\nVector after deletion: "; 
for (int x : v) 
cout << x << " "; 
cout << "\nFirst element: " << v.front(); 
cout << "\nLast element: " << v.back() << endl; 
cout << "\n=== LIST OPERATIONS ===" << endl; 
list<int> lst; // declare a list 
lst.push_back(100); 
lst.push_back(200); 
lst.push_front(50); // insert at beginning 
cout << "List elements after insertion: "; 
for (int x : lst) 
cout << x << " "; 
lst.pop_front(); // remove first element 
cout << "\nList after deletion: "; 
for (int x : lst) 
cout << x << " "; 
cout << "\nList traversal using iterator: "; 
for (list<int>::iterator it = lst.begin(); it != lst.end(); ++it) 
cout << *it << " "; 
cout << endl; 
return 0; 
}

//

#include <iostream> 
#include <deque> 
using namespace std; 
int main() { 
deque<int> dq; 
cout << "=== DEQUE OPERATIONS ===" << endl; 
dq.push_back(10); 
dq.push_back(20); 
dq.push_front(5); 
cout << "Deque elements after insertion: "; 
for (int x : dq) 
cout << x << " ";
dq.pop_front(); 
cout << "\nDeque after deleting front element: "; 
for (int x : dq) 
cout << x << " "; 
dq.pop_back(); 
cout << "\nDeque after deleting last element: "; 
for (int x : dq) 
cout << x << " "; 
cout << "\nFront element: " << dq.front(); 
cout << "\nBack element: " << dq.back(); 
dq.push_front(1); 
dq.push_back(50); 
cout << "\nDeque after adding 1 (front) and 50 (back): "; 
for (int x : dq) 
cout << x << " "; 
cout << endl; 
return 0;
} 


//

#include <iostream> 
#include <map> 
using namespace std; 
int main() 
{ 
map <int, strings> students; 
cout << "=== MAP OPERATIONS ===" << endl; 
students[101] = "Alice"; students[102] = "Bob"; 
students[103] = "Charlie"; 
students.insert({104, "David"}); 
cout << "Students after insertion:" << endl; 
for (auto x : students) 
cout << "Roll No: " << x.first << " Name: " << x.second << endl; 
cout << "\nAccess element with key 102: " << students[102] << endl; 
int key = 103; 
auto it = students.find(key); 
if (it != students.end()) 
cout << "Found student with Roll No " << key << ": " << it->second << endl; 
else 
cout << "Student with Roll No " << key << " not found!" << endl; 
students.erase(101); 
cout << "\nAfter deleting key 101:" << endl; 
for (auto x : students) 
cout << "Roll No: " << x.first << " Name: " << x.second << endl; 
cout << "\nTotal students: " << students.size() << endl; 
return 0;
} 


}
